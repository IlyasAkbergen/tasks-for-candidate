#Frontend JS

##Задание 1

В примере кода разработайте реализацию функции sumUpDiagonals() на JavaScript таким образом, чтобы она возвращала суммы основной и вторичной диагоналей квадратной матрицы.

var matrixExample = [
[ 1, 2, 3, 4 ],
[ 4, 5, 6, 5 ],
[ 7, 8, 9, 7 ],
[ 7, 8, 9, 7 ]
];
function sumUpDiagonals(matrix) {
// ...
}
console.log(sumUpDiagonals(matrixExample))

##Задание 2
Реализовать одностраничное приложение резервирования билетов в кинотеатр. Время начала сеансов 10.00, время последнего сеанса 20.00. Шаг - каждые 2 часа. Таким образом в течение дня может быть 6 сеансов.
Интерфейс должен отображать доступные даты для бронирования, сеансы для выбранной даты, свободные и забронированные места. При выборе даты и сеанса меньше текущего времени и даты, должны отображаться архивные данные без возможности их изменения.
Для хранения дат использовать LocalStorage, и при перезагрузке страницы считывать данные из LocalStorage.
Глубина архива: одна неделя до текущей даты. Максимальный период бронирования: одна неделя от текущей даты.

##Задание 3
Тестовое задание "Создание списка задач".
Задание пишем на VueJS.
Для работы рекомендуется использовать @vue/cli пакет.
Использование CSS препроцессора: SCSS;
Придерживаться стиля БЭМ при написании селекторов;
Код стайл соблюсти в соответствии с air-bnb;
1. Создать форму для добавления задачи:
    - Поле "Название задачи";
    - Поле "Описание задачи";
    - Кнопка для создания;
2. Для вывода добавленных задач построить таблицу:
    - Использовать для построения таблицы div и flexbox;
    - Подкрасить строки серым через одну;
    - 4 колонки (checkbox, порядковый номер, название задачи, описание задачи);
3. Ниже таблицы добавить кнопку "Удалить":
    - При нажатии на кнопку "Удалить" должны удалиться выбранные задачи из таблицы;
4. Заполнить таблицу тестовой информацией:
    - При загрузке страницы создать эмуляцию асинхронного запроса к серверу используя Promise (сделать задержку в 3 секунды);
    - В промежутке ожидания отобразить вместо таблицы надпись "Loading...";
5. Добавить кнопку "Фильтр":
    - При нажатии фильтровать задачи в таблице по алфавиту;
    - При повторном нажатии возвращать исходный порядок списка;
6. Добавить поле живого поиска по названию и описанию;
